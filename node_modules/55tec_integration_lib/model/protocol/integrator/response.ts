
import { Metadata } from '../../metadata';
import { Integrable } from '../../';

import { Cursor, Pagination, Request } from './request';
import { StatusCode } from "../";

export type ErrorBody = {
    error: {
        message: string,
        name: string
    } | string
};

export type MetadataBody = Metadata;

export type GetUrlOAuthBody = {
    url: string,
};

export type GetTokenOAuthBody = {
    token: string,
    refresh?: string,
};

export type ListBody = {
    data: Integrable[],
    pagination: Pagination,
    cursor?: Cursor,
};

export type FindBody = {
    data: Integrable,
    wwwRef?: {
        model: string,
    },
};

export type SaveBody = {
    id: string,
    wwwRef?: {
        model: string,
    },
    data?: Integrable, // when a projection is passed to a SaveBody, a find operation result is also returned
};

export type OAuthBody =
    GetUrlOAuthBody
    | GetTokenOAuthBody
    ;

export type FunctionBody = string;

export type EmptyBody = void;

export type BulkBody = Body[];

export type Body =
    SaveBody
    | ListBody
    | FindBody
    | MetadataBody
    | OAuthBody
    | ErrorBody
    | FunctionBody
    | EmptyBody
    | BulkBody
    ;

export type Response = {
    id: string,
    response: _Response
};

export type _Response = {
    code: StatusCode,
    error?: {
        message: string,
        name: string
    } | string,
    body?: Body
};

export function isResponse(target: any): target is Request {

    return (
        !!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === undefined)
        && (target.response)
        && (typeof target.response === 'object')
        && (target.response.code)
        && (Object.values(StatusCode).includes(('' + target.response.code) as StatusCode))
    );

}

export class ResponseError extends Error {

    code: StatusCode;
    name: string;

    constructor(message: string, code: StatusCode, name?: string) {
        super(message);

        if (code == StatusCode.OK) throw new Error(`Invalid error code: ${code}`);

        this.message = message;
        this.code = code;
        this.name = name || '';
    }

    toJSON() {
        return {
            message: this.message,
            code: this.code,
            name: this.name,
        };
    }

    toString() {
        return `${this.name} - ${this.code} - ${this.message}`;
    }

}
