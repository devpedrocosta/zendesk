import { Metadata } from '../../metadata';
import { Integrable } from '../../';
import { Cursor, Pagination, Request } from './request';
import { StatusCode } from "../";
export declare type ErrorBody = {
    error: {
        message: string;
        name: string;
    } | string;
};
export declare type MetadataBody = Metadata;
export declare type GetUrlOAuthBody = {
    url: string;
};
export declare type GetTokenOAuthBody = {
    token: string;
    refresh?: string;
};
export declare type ListBody = {
    data: Integrable[];
    pagination: Pagination;
    cursor?: Cursor;
};
export declare type FindBody = {
    data: Integrable;
    wwwRef?: {
        model: string;
    };
};
export declare type SaveBody = {
    id: string;
    wwwRef?: {
        model: string;
    };
    data?: Integrable;
};
export declare type OAuthBody = GetUrlOAuthBody | GetTokenOAuthBody;
export declare type FunctionBody = string;
export declare type EmptyBody = void;
export declare type BulkBody = Body[];
export declare type Body = SaveBody | ListBody | FindBody | MetadataBody | OAuthBody | ErrorBody | FunctionBody | EmptyBody | BulkBody;
export declare type Response = {
    id: string;
    response: _Response;
};
export declare type _Response = {
    code: StatusCode;
    error?: {
        message: string;
        name: string;
    } | string;
    body?: Body;
};
export declare function isResponse(target: any): target is Request;
export declare class ResponseError extends Error {
    code: StatusCode;
    name: string;
    constructor(message: string, code: StatusCode, name?: string);
    toJSON(): {
        message: string;
        code: StatusCode;
        name: string;
    };
    toString(): string;
}
