"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRequest = exports.RequestError = exports.getNextCursor = exports.getCursorQuery = void 0;
function getCursorQuery(identifier, sort) {
    const fields = Object.keys(sort).sort();
    if (fields.length > 1)
        throw new Error('Cursors with multiple sort fields are not supported yet');
    if (!identifier)
        return {};
    const data = JSON.parse(Buffer.from(identifier, 'base64').toString('utf8'));
    return fields.reduce((o, e, i) => {
        let op = '$gt';
        if (sort[e] < 0)
            op = '$lt';
        o[e] = { [op]: data[i] };
        return o;
    }, {});
}
exports.getCursorQuery = getCursorQuery;
function getNextCursor(dataSet, cursor) {
    const nCursor = {
        sort: cursor.sort,
        limit: cursor.limit,
        next: undefined,
        current: cursor.next || cursor.current,
    };
    if (!dataSet.length)
        return nCursor;
    const last = dataSet[dataSet.length - 1];
    if (!last)
        return nCursor;
    const fields = Object.keys(cursor.sort).sort();
    if (fields.length > 1)
        throw new Error('Cursors with multiple sort fields are not supported yet');
    nCursor.next = Buffer.from(JSON.stringify(fields.map(k => {
        const segments = k.split('.');
        let target = last;
        for (const k of segments) {
            if (!target || typeof target !== 'object')
                return target;
            target = target[k];
        }
        if (target instanceof Date)
            return target.toISOString();
        return target;
    }))).toString('base64');
    return nCursor;
}
exports.getNextCursor = getNextCursor;
class RequestError extends Error {
    constructor(message, code = '500') {
        super(message);
        this.code = '' + code;
    }
}
exports.RequestError = RequestError;
function isRequest(target) {
    return (!!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === undefined)
        && (target.action)
        && (typeof target.action === 'string')
        && (target.body === undefined || (target.body && (typeof target.body === 'object')))
        && (target.resources)
        && (typeof target.resources === 'object')
        && (target.resources.length !== undefined)
        && (target.origin === undefined || (target.origin
            && typeof target.origin === 'object'
            && typeof target.origin.id === 'string'
            && typeof target.origin.type === 'string'))
        && (target.timeout === undefined || (['string', 'number'].includes(typeof target.timeout)
            && !isNaN(+target.timeout))));
}
exports.isRequest = isRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUF3QkEsU0FBZ0IsY0FBYyxDQUFDLFVBQThCLEVBQUUsSUFBMkI7SUFDdEYsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN4QyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztJQUNsRyxJQUFJLENBQUMsVUFBVTtRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQzNCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDNUUsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNsQyxJQUFJLEVBQUUsR0FBa0IsS0FBSyxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7UUFDdkIsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDWCxDQUFDO0FBWEQsd0NBV0M7QUFFRCxTQUFnQixhQUFhLENBQUMsT0FBNkIsRUFBRSxNQUFjO0lBQ3ZFLE1BQU0sT0FBTyxHQUFXO1FBQ3BCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtRQUNqQixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7UUFDbkIsSUFBSSxF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