import { Origin } from './origin';
import { Credential } from '../credential';
import { Resource } from "../resource";
export declare type Pagination = {
    page: number;
    size: number;
    total?: number;
    nextPage?: number;
};
/**
 * @property {string} current - current position
 * @property {number} limit - max amount of documents retrieved
 * @property {string} next - next position
 * @property {Object} sort - field used as index with sort order as value
 */
export declare type Cursor = {
    sort: {
        [field: string]: 1 | -1;
    };
    limit: number;
    current?: string;
    next?: string;
};
export declare function getCursorQuery(identifier: string | undefined, sort: {
    [k: string]: 1 | -1;
}): any;
export declare function getNextCursor(dataSet: {
    [k: string]: any;
}[], cursor: Cursor): Cursor;
export declare type Options = {
    [field: string]: any;
};
export declare type Body = {
    data?: {
        [field: string]: any;
    };
    credentials?: Credential[];
    pagination?: Pagination;
    cursor?: Cursor;
    projection?: Projection;
    options?: Options;
};
export declare type BulkBody = Body & {
    data?: {
        [field: string]: any;
    }[];
};
export declare class RequestError extends Error {
    code: string;
    constructor(message: string, code?: number | string);
}
export declare type Projection = string[];
export declare type Request = {
    id: string;
    action: string;
    body?: Body;
    resources: Resource[];
    origin?: Origin;
    timeout?: number;
};
export declare function isRequest(target: any): target is Request;
