
export type Token = string;

export type Basic = {
    id: string,
    secret: string
};

export type DeviceCode = {
    session: string,
    id: number,
    secret: string
}

export type Key = string;
export type Session = any;

export type QRCode = string;

export type Value = Basic | Token | Key | Session | DeviceCode | QRCode;

export type Credential = {
    type: Type,
    value: Value
};

export enum Type {
    TOKEN = 'token',
    BASIC = 'basic',
    KEY = 'key',
    SESSION = 'session',
    // @deprecated
    QRCODE = 'qrcode',
    // @deprecated
    DEVICE_CODE = 'device-code',
}

export function isCredential(target: any): target is Credential {

    return !!target
        && (typeof target === 'object')
        && target.type
        && typeof target.type === 'string'
        && Object.values(Type).includes(target.type as Type)
        ;

}

export function isCredentials(target: any): target is Credential[] {

    return !!target
        && (typeof target === 'object')
        && (target.length !== undefined)
        && (typeof target.every === 'function')
        && (target.every((c: any) => isCredential(c)))
        ;

}
