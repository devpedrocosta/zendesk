import { IdentifiablePromise } from "../../../util/promise";
export declare class HTTPError extends Error {
    code: string;
    name: string;
    constructor(message: string, code?: string, name?: string);
    toJSON(): {
        message: string;
        code: string;
        name: string;
    };
    toString(): string;
}
export declare type Headers = {
    [h: string]: string | undefined;
};
export declare enum Method {
    GET = "get",
    POST = "post",
    PUT = "put",
    PATCH = "patch",
    DELETE = "delete"
}
export declare type SimpleRequest = {
    urn: string;
    method: Method;
    query: {
        [f: string]: any;
    };
    body: any;
    params: {
        [f: string]: any;
    };
    headers: {
        [f: string]: string;
    };
    connection: {
        remoteAddress: string | undefined;
    };
};
export interface Request extends SimpleRequest {
    header: (header: string) => string | undefined;
}
export interface Response {
    status(value: string | number): this;
    header(header: string, value: string): this;
    json(data: any, status?: string | number): void;
    end(): void;
    sendFile(path: string): void;
    text(data: string): void;
    send(data: string): void;
}
export declare type LiteralResponse = {
    code: string;
    headers?: Headers;
    body?: any;
};
export declare class RequestImpl implements Request {
    urn: string;
    method: Method;
    query: {
        [f: string]: any;
    };
    body: {
        [f: string]: any;
    };
    params: {
        [f: string]: any;
    };
    headers: {
        [f: string]: string;
    };
    connection: {
        remoteAddress: string | undefined;
    };
    constructor(context: SimpleRequest);
    header(header: string): string;
}
export declare class ResponseImpl extends IdentifiablePromise<LiteralResponse, SimpleRequest> implements Response {
    code: string;
    name?: string;
    body?: any;
    headers?: Headers;
    status(value: string | number): this;
    json(data: any, status?: string | number): void;
    end(): void;
    header(header: string, value: string): this;
    sendFile(path: string): void;
    text(content: string): any;
    send(data: string): any;
}
declare enum StatusScheduling {
    FIRST = "first",
    MIDDLE = "middle",
    LAST = "last"
}
export declare function SchedulingStrategy(handlers: (Handler | Middleware)[]): Generator<{
    status: StatusScheduling;
    handler: Handler | Middleware;
}, any, (Handler | Middleware)[]>;
export declare type Handler = (req: Request, res: Response) => void;
export declare type Middleware = (req: Request, res: Response, next: () => void) => any;
export declare type Registry = {
    [urn: string]: Handler;
};
export declare class Router {
    readonly resources: {
        [method in Method]: Registry;
    };
    get(urn: string, ...handlers: (Handler | Middleware)[]): this;
    post(urn: string, ...handlers: (Handler | Middleware)[]): this;
    put(urn: string, ...handlers: (Handler | Middleware)[]): this;
    patch(urn: string, ...handlers: (Handler | Middleware)[]): this;
    delete(urn: string, ...handlers: (Handler | Middleware)[]): this;
    register(method: Method, urn: string, handler: Handler): this;
    getHandler(method: Method, urn: string): Handler | undefined;
}
export {};
