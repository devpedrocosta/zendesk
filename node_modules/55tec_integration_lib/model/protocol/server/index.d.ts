import { Channel, Client as _Client, Request as _Request, Response as _Response } from '../../protocol';
import { Router } from "./resource";
import { Client as RegistryClient } from './message/registry';
import { Client as RouteClient } from './message/route';
export declare type Request = _Request & {
    channel: 'server';
    type: string;
};
export declare type Response = _Response & {
    channel: 'server';
    error?: string;
};
export declare enum MessageType {
    REGISTRY = "registry",
    ROUTE = "route"
}
export declare function isRequest(target: any): target is Request;
export declare function isResponse(target: any): target is Response;
/**
 * @TODO refactor to make it respect liskov principle
 */
export declare class Client extends _Client {
    protected registryClient: RegistryClient;
    protected routeClient: RouteClient;
    constructor(channel: Channel);
    use(router: Router): Promise<void>;
    build(): Promise<Request | Response>;
    send(): Promise<any>;
    isRequest(target: any): target is Request;
    isResponse(target: any): target is Response;
    implementsProtocol(target: any): target is Request | Response;
    protected handleUnregistredMessage(message: Request | Response): Promise<any>;
    protected parseResolution(data: Request | Response): void;
    setTimeout(timeout: number): void;
}
export { Router } from './resource';
