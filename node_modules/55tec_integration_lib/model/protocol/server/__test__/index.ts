import { v4 as uuid } from 'uuid';

import { Channel } from "../../";

import { Client, Router } from '../';

jest.setTimeout(10000);

describe('Server protocol', () => {

    it('should register a resource and handle a request to it', async () => {

        let channelHandlers: any = [];

        let id = '';

        let channel: Channel = {
            on(event: string, handler: (res: any, ...args: any[]) => any): any {
                channelHandlers.push(handler);
                // console.log('on', event, handler.toString());
            },
            send(req: any, ...args: any[]): any {
                console.log('send', req, ...args);
                if (req && req.id) id = req.id;
            }
        };

        let client = new Client(channel);
        let router = new Router();

        router.get('/test', (req, res) => {

            console.log('Ping received. Data: ', req);

            return res.json({
                'success': true
            });

        });

        setTimeout(function() {

            for(let handler of channelHandlers) handler({
                id,
                channel: 'server',
                type: 'registry',
            });

        }, 1500);

        await client.use(router);

        id = uuid();

        for(let handler of channelHandlers) handler({
            id,
            channel: 'server',
            type: 'route',
            body: {
                urn: '/test',
                method: 'get',
                query: {

                },
                body: {
                    'data': {
                        'name': '55pbx'
                    }
                },
                params: {

                },
                headers: {
                    'content-type': 'application/json',
                    'authorization': 'Basic ' + Buffer.from('user:pass').toString('base64')
                },
            }
        });

        await new Promise(resolve => setTimeout(resolve, 2000));

    });


});
