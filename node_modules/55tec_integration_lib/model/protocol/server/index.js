"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = exports.Client = exports.isResponse = exports.isRequest = exports.MessageType = void 0;
const protocol_1 = require("../../protocol");
const registry_1 = require("./message/registry");
const route_1 = require("./message/route");
var MessageType;
(function (MessageType) {
    MessageType["REGISTRY"] = "registry";
    MessageType["ROUTE"] = "route";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
function isRequest(target) {
    return registry_1.isRequest(target) || route_1.isRequest(target);
}
exports.isRequest = isRequest;
function isResponse(target) {
    return registry_1.isResponse(target) || route_1.isResponse(target);
}
exports.isResponse = isResponse;
/**
 * @TODO refactor to make it respect liskov principle
 */
class Client extends protocol_1.Client {
    constructor(channel) {
        super(channel);
        this.registryClient = new registry_1.Client(channel);
        this.routeClient = new route_1.Client(channel);
    }
    async use(router) {
        await new Promise(resolve => setTimeout(resolve, 3000));
        await this.registryClient.send(router);
        this.routeClient.add(router);
    }
    async build() {
        throw new Error('Method "build" cannot be called externally. Use "use" method instead');
    }
    async send() {
        throw new Error('Method "send" cannot be called externally. Use "use" method instead');
    }
    isRequest(target) { return isRequest(target); }
    isResponse(target) { return isResponse(target); }
    implementsProtocol(target) {
        return this.isRequest(target) || this.isResponse(target);
    }
    async handleUnregistredMessage(message) { }
    parseResolution(data) { }
    setTimeout(timeout) {
        this.routeClient.REQUEST_HANDLER_TIMEOUT = timeout;
    }
}
exports.Client = Client;
var resource_1 = require("./resource");
Object.defineProperty(exports, "Router", { enumerable: true, get: function () { return resource_1.Router; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBd0c7QUFHeEcsaURBQWdJO0FBQ2hJLDJDQUFvSDtBQVlwSCxJQUFZLFdBR1g7QUFIRCxXQUFZLFdBQVc7SUFDbkIsb0NBQXFCLENBQUE7SUFDckIsOEJBQWUsQ0FBQTtBQUNuQixDQUFDLEVBSFcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFHdEI7QUFFRCxTQUFnQixTQUFTLENBQUMsTUFBVztJQUNqQyxPQUFPLG9CQUFpQixDQUFDLE1BQU0sQ0FBQyxJQUFJLGlCQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUZELDhCQUVDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLE1BQVc7SUFDbEMsT0FBTyxxQkFBa0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxrQkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFGRCxnQ0FFQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsaUJBQU87SUFLL0IsWUFBWSxPQUFnQjtRQUN4QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksaUJBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksY0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQWM7UUFDcEIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN4RCxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsc0VBQXNFLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDTixNQUFNLElBQUksS0FBSyxDQUFDLHFFQUFxRSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUFXLElBQXVCLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV2RSxVQUFVLENBQUMsTUFBVyxJQUF3QixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsa0JBQWtCLENBQUMsTUFBVztRQUMxQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRVMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLE9BQTJCLElBQWlCLENBQUM7SUFFNUUsZUFBZSxDQUFDLElBQXdCLElBQUcsQ0FBQztJQUV0RCxVQUFVLENBQUMsT0FBZTtRQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLHVCQUF1QixHQUFHLE9BQU8sQ0FBQztJQUN2RCxDQUFDO0NBRUo7QUF6Q0Qsd0JBeUNDO0FBRUQsdUNBQW9DO0FBQTNCLGtHQUFBLE1BQU0sT0FBQSJ9