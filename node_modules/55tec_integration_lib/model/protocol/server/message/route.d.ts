/**
 * @TODO refactor names
 */
import { Request as _Request, Response as _Response, MessageType } from "../";
import { Router, SimpleRequest, LiteralResponse as LiteralResourceResponse, Handler, HTTPError } from "../resource";
import { Client as _Client, Channel } from '../../';
import { Headers } from "../resource";
export declare type Request = _Request & {
    type: MessageType.ROUTE;
    body: RequestBody;
};
export declare type RequestBody = SimpleRequest;
export declare type Response = _Response & {
    type: MessageType.ROUTE;
    code: string;
    headers?: Headers;
    body?: ResponseBody;
    name?: string;
};
export declare type ResponseBody = any;
export declare function isRequest(target: any): target is SimpleRequest;
export declare function isResponse(target: any): target is Response;
export declare class Client extends _Client {
    REQUEST_HANDLER_TIMEOUT: number;
    routers: Router[];
    constructor(channel: Channel);
    add(router: Router): void;
    build(id: string, data: HTTPError | ResponseBody, code?: string, headers?: Headers): Promise<Response>;
    send(id: string, data: Error | ResponseBody, code?: string, headers?: Headers, name?: string): Promise<any>;
    isRequest(target: any): target is Request;
    isResponse(target: any): target is Response;
    implementsProtocol(target: any): target is Request | Response;
    protected handleUnregistredMessage(message: Request | Response): Promise<any>;
    protected process(req: Request, handler: Handler): Promise<LiteralResourceResponse>;
    protected parseResolution(data: Request | Response): any;
}
