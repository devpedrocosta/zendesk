"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.isResponse = exports.isRequest = void 0;
const uuid_1 = require("uuid");
const __1 = require("../");
const resource_1 = require("../resource");
const __2 = require("../../");
const index_1 = require("../../index");
function isRequest(target) {
    return (!!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === 'server')
        && (target.type === __1.MessageType.REGISTRY)
        && (target.body)
        && (typeof target.body === 'object')
        && (Object.keys(target.body).every(k => Object.values(resource_1.Method).includes(k))));
}
exports.isRequest = isRequest;
function isResponse(target) {
    return (!!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === 'server')
        && (target.type === __1.MessageType.REGISTRY)
        && (!target.error || (typeof target.error === 'string')));
}
exports.isResponse = isResponse;
class Client extends __2.Client {
    constructor(channel) {
        super(channel);
    }
    async build(data) {
        return {
            id: uuid_1.v4(),
            channel: 'server',
            type: __1.MessageType.REGISTRY,
            body: Object.keys(data.resources).reduce((o, method) => {
                let registry = data.resources[method];
                o[method] = Object.keys(registry);
                return o;
            }, {})
        };
    }
    async send(router) {
        return super.send(router);
    }
    isRequest(target) { return isRequest(target); }
    isResponse(target) { return isResponse(target); }
    implementsProtocol(target) {
        return this.isRequest(target) || this.isResponse(target);
    }
    async handleUnregistredMessage(message) { }
    parseResolution(data) {
        if (!this.isResponse(data))
            throw new index_1.ResolutionError('response', data);
        if (data.error)
            throw new Error(data.error);
        return {};
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBa0M7QUFDbEMsMkJBQThFO0FBQzlFLDBDQUE2QztBQUM3Qyw4QkFBb0Q7QUFDcEQsdUNBQTRDO0FBZTVDLFNBQWdCLFNBQVMsQ0FBQyxNQUFXO0lBRWpDLE9BQU8sQ0FDSCxDQUFDLENBQUMsTUFBTTtXQUNMLENBQUMsT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDO1dBQzVCLENBQUMsT0FBTyxNQUFNLENBQUMsRUFBRSxLQUFLLFFBQVEsQ0FBQztXQUMvQixDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDO1dBQzdCLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxlQUFXLENBQUMsUUFBUSxDQUFDO1dBQ3RDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztXQUNiLENBQUMsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztXQUNqQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFXLENBQUMsQ0FBQyxDQUFDLENBQ3hGLENBQUM7QUFFTixDQUFDO0FBYkQsOEJBYUM7QUFFRCxTQUFnQixVQUFVLENBQUMsTUFBVztJQUVsQyxPQUFPLENBQ0gsQ0FBQyxDQUFDLE1BQU07V0FDTCxDQUFDLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQztXQUM1QixDQUFDLE9BQU8sTUFBTSxDQUFDLEVBQUUsS0FBSyxRQUFRLENBQUM7V0FDL0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQztXQUM3QixDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssZUFBVyxDQUFDLFFBQVEsQ0FBQztXQUN0QyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sTUFBTSxDQUFDLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUMzRCxDQUFDO0FBRU4sQ0FBQztBQVhELGdDQVdDO0FBRUQsTUFBYSxNQUFPLFNBQVEsVUFBTztJQUUvQixZQUFZLE9BQWdCO1FBQ3hCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFZO1FBRXBCLE9BQU87WUFDSCxFQUFFLEVBQUUsU0FBSSxFQUFFO1lBQ1YsT0FBTyxFQUFFLFFBQVE7WUFDakIsSUFBSSxFQUFFLGVBQVcsQ0FBQyxRQUFRO1lBQzFCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFNLEVBQUUsTUFBYyxFQUFFLEVBQUU7Z0JBQ2hFLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBZ0IsQ0FBQyxDQUFDO2dCQUNoRCxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDbEMsT0FBTyxDQUFDLENBQUM7WUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ1QsQ0FBQztJQUVOLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQWM7UUFDckIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxTQUFTLENBQUMsTUFBVyxJQUF1QixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdkUsVUFBVSxDQUFDLE1BQVcsSUFBd0IsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLGtCQUFrQixDQUFDLE1BQVc7UUFDMUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVTLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxPQUEyQixJQUFpQixDQUFDO0lBRTVFLGVBQWUsQ0FBQyxJQUF3QjtRQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFBRSxNQUFNLElBQUksdUJBQWUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEUsSUFBSSxJQUFJLENBQUMsS0FBSztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTVDLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUVKO0FBM0NELHdCQTJDQyJ9