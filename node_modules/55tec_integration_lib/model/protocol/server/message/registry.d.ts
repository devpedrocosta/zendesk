import { Request as _Request, Response as _Response, MessageType } from "../";
import { Method, Router } from "../resource";
import { Client as _Client, Channel } from '../../';
export declare type Request = _Request & {
    type: MessageType.REGISTRY;
    body: RequestBody;
};
export declare type RequestBody = {
    [method in Method]: string[];
};
export declare type Response = _Response & {
    type: MessageType.REGISTRY;
};
export declare function isRequest(target: any): target is Request;
export declare function isResponse(target: any): target is Response;
export declare class Client extends _Client {
    constructor(channel: Channel);
    build(data: Router): Promise<Request>;
    send(router: Router): Promise<any>;
    isRequest(target: any): target is Request;
    isResponse(target: any): target is Response;
    implementsProtocol(target: any): target is Request | Response;
    protected handleUnregistredMessage(message: Request | Response): Promise<any>;
    protected parseResolution(data: Request | Response): any;
}
