"use strict";
/**
 * @TODO refactor names
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.isResponse = exports.isRequest = void 0;
const __1 = require("../");
const resource_1 = require("../resource");
const __2 = require("../../");
function isRequest(target) {
    return (!!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === 'server')
        && (target.type === __1.MessageType.ROUTE)
        && (target.body && (typeof target.body === 'object'))
        && (typeof target.body.urn === 'string')
        && (Object.values(resource_1.Method).includes(target.body.method))
        && (target.body.query && (typeof target.body.query === 'object'))
        && (target.body.body && (typeof target.body.body === 'object'))
        && (target.body.params && (typeof target.body.params === 'object'))
        && (target.body.headers && (typeof target.body.headers === 'object')));
}
exports.isRequest = isRequest;
function isResponse(target) {
    return (!!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === 'server')
        && (target.type === __1.MessageType.ROUTE)
        && (!target.error || (typeof target.error === 'string')));
}
exports.isResponse = isResponse;
class Client extends __2.Client {
    constructor(channel) {
        super(channel);
        this.REQUEST_HANDLER_TIMEOUT = 20000;
        this.routers = [];
    }
    add(router) {
        this.routers.push(router);
    }
    async build(id, data, code = '200', headers) {
        let res = {
            id,
            channel: 'server',
            code,
            headers,
            type: __1.MessageType.ROUTE,
        };
        if (data instanceof resource_1.HTTPError) {
            res.error = data.message;
            res.code = data.code;
            res.name = data.name;
        }
        else
            res.body = data;
        return res;
    }
    async send(id, data, code, headers, name) {
        return super.send(id, data, code, headers, name);
    }
    isRequest(target) { return isRequest(target); }
    isResponse(target) { return isResponse(target); }
    implementsProtocol(target) {
        return this.isRequest(target) || this.isResponse(target);
    }
    async handleUnregistredMessage(message) {
        if (!this.isRequest(message))
            return;
        let id = message.id;
        let { urn, method } = message.body;
        let router = this.routers.find(router => !!router.getHandler(method, urn));
        if (!router)
            return this.send(id, new resource_1.HTTPError('Not found', '404'));
        let handler = router.getHandler(method, urn);
        try {
            let literal = await this.process(message, handler);
            return this.send(id, literal.body, literal.code, literal.headers);
        }
        catch (err) {
            if (!(err instanceof resource_1.HTTPError))
                err = new resource_1.HTTPError(err.message);
            return this.send(id, err, err.code, {}, err.name);
        }
    }
    async process(req, handler) {
        let reqWrapper = new resource_1.RequestImpl(req.body);
        let resWrapper = new resource_1.ResponseImpl(req.id, req.body);
        handler(reqWrapper, resWrapper);
        if (this.REQUEST_HANDLER_TIMEOUT > 0)
            resWrapper.setTimeout(this.REQUEST_HANDLER_TIMEOUT);
        return resWrapper;
    }
    parseResolution(data) {
        // no resolution is needed if no requests are sent
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyb3V0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQUVILDJCQUE4RTtBQUM5RSwwQ0FBOEw7QUFDOUwsOEJBQW9EO0FBb0JwRCxTQUFnQixTQUFTLENBQUMsTUFBVztJQUVqQyxPQUFPLENBQ0gsQ0FBQyxDQUFDLE1BQU07V0FDTCxDQUFDLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQztXQUM1QixDQUFDLE9BQU8sTUFBTSxDQUFDLEVBQUUsS0FBSyxRQUFRLENBQUM7V0FDL0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQztXQUM3QixDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssZUFBVyxDQUFDLEtBQUssQ0FBQztXQUNuQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUM7V0FDbEQsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLFFBQVEsQ0FBQztXQUNyQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1dBQ3BELENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDO1dBQzlELENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDO1dBQzVELENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDO1dBQ2hFLENBQUMs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