"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.isResponse = exports.isRequest = exports.Operation = void 0;
const fs_1 = __importDefault(require("fs"));
const querystring_1 = __importDefault(require("querystring"));
const request_promise_1 = __importDefault(require("request-promise"));
const config_pbx_1 = __importDefault(require("config-pbx"));
const auth_1 = __importDefault(require("../../../util/auth"));
const protocol_1 = require("../../protocol");
var Operation;
(function (Operation) {
    Operation["DOWNLOAD"] = "download";
    Operation["UPLOAD"] = "upload";
})(Operation = exports.Operation || (exports.Operation = {}));
function isRequest(target) {
    return (!!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === 'file')
        && (target.body)
        && (typeof target.body === 'object')
        && (typeof target.body.name === 'string')
        && (typeof target.body.mimeType === 'string')
        && (typeof target.body.repository === 'string')
        && (typeof target.body.operation === 'string')
        && (typeof target.body.credentials === 'object')
        && (!target.body.uri || typeof target.body.uri === 'string')
        && (!target.body.data || typeof target.body.data === 'string'));
}
exports.isRequest = isRequest;
function isResponse(target) {
    return (!!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === 'file')
        && (!target.error || (typeof target.error === 'string'))
        && (!target.body || (typeof target.body === 'object'
            && typeof target.body.name === 'string'
            && typeof target.body.mimeType === 'string'
            && typeof target.body.repository === 'string'
            && typeof target.body.createdAt === 'string'
            && typeof target.body.ttl === 'number'
            && (!target.body.uri || (typeof target.body.uri === 'string'))
            && (!target.body.data || (typeof target.body.data === 'string')))));
}
exports.isResponse = isResponse;
/**
 * @TODO refactor to make it respect liskov principle
 */
class Client extends protocol_1.Client {
    constructor(channel, authUtils) {
        super(channel);
        this.authUtils = authUtils;
    }
    async downloadByStream(credentials, repository, filename, writable) {
        const [token, sip] = await this.getTokenAndSip(credentials);
        const filesBase = await this.getFileBase(sip);
        const uri = `${filesBase}/${repository}/${filename}`;
        request_promise_1.default.get(uri, {
            headers: {
                'authorization': `Bearer ${token}`
            },
        }).pipe(writable);
    }
    async download(credentials, repository, filename, destination) {
        const file = fs_1.default.createWriteStream(destination);
        await this.downloadByStream(credentials, repository, filename, file);
        return new Promise((resolve, reject) => {
            file.on('finish', () => resolve());
            file.on('error', (err) => reject(err));
        });
    }
    async uploadByStream(credentials, descriptorOrRepository, readable) {
        const [token, sip] = await this.getTokenAndSip(credentials);
        let repository = descriptorOrRepository;
        let query = '';
        if (typeof descriptorOrRepository !== 'string') {
            repository = descriptorOrRepository.repository;
            query = '?' + querystring_1.default.stringify(descriptorOrRepository);
        }
        const filesBase = await this.getFileBase(sip);
        let uri = `${filesBase}/${repository}${query}`;
        return new Promise((resolve, reject) => {
            request_promise_1.default.post(uri, {
                headers: {
                    'authorization': `Bearer ${token}`,
                },
                formData: {
                    file: readable
                },
            }, (err, response) => {
                if (err)
                    reject(err);
                resolve(JSON.parse(response.body));
            });
        });
    }
    async upload(credentials, file) {
        const [token, sip] = await this.getTokenAndSip(credentials);
        const filesBase = await this.getFileBase(sip);
        const uri = `${filesBase}/${file.repository}`;
        return new Promise((resolve, reject) => {
            request_promise_1.default.post(uri, {
                headers: {
                    'authorization': `Bearer ${token}`,
                    'content-type': 'application/json'
                },
                body: JSON.stringify({ file }),
            }, (err, response) => {
                if (err)
                    reject(err);
                resolve(JSON.parse(response.body));
            });
        });
    }
    async build() {
        throw new Error('Method "build" cannot be called externally. Use "upload", "download" or "download" method instead');
    }
    async send() {
        throw new Error('Method "send" cannot be called externally. Use "upload", "download" or "download" method instead');
    }
    isRequest(target) { return isRequest(target); }
    isResponse(target) { return isResponse(target); }
    implementsProtocol(target) {
        return this.isRequest(target) || this.isResponse(target);
    }
    async handleUnregistredMessage(message) { }
    parseResolution(data) { }
    async getFileBase(sipServer) {
        let applications = config_pbx_1.default.get('application-config', '' + process.env.NODE_ENV, { sipServer });
        if (applications && typeof applications.then === 'function')
            applications = await applications;
        const application = applications.find((e) => e.identifier === '55pbx');
        if (!application)
            throw new Error(`Application settings not found`);
        const sip = application.settings.sip.find((sip) => sip.sip_server === sipServer);
        if (!sip)
            throw new Error(`SIP settings not found: ${sipServer}`);
        return sip.files_base;
    }
    async getTokenAndSip(credentials) {
        let search;
        if (typeof credentials === 'string')
            search = { clientId: credentials };
        else
            search = { credentials };
        const { clientId, sipServer } = await this.authUtils.getClient(search);
        const token = auth_1.default.makeToken(clientId);
        return [token, sipServer];
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSw0Q0FBb0I7QUFDcEIsOERBQTZCO0FBQzdCLHNFQUFzQztBQUN0Qyw0REFBbUM7QUFFbkMsOERBQXNDO0FBQ3RDLDZDQUFzRztBQU90RyxJQUFZLFNBR1g7QUFIRCxXQUFZLFNBQVM7SUFDakIsa0NBQXFCLENBQUE7SUFDckIsOEJBQWlCLENBQUE7QUFDckIsQ0FBQyxFQUhXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBR3BCO0FBbUNELFNBQWdCLFNBQVMsQ0FBQyxNQUFXO0lBRWpDLE9BQU8sQ0FDSCxDQUFDLENBQUMsTUFBTTtXQUNMLENBQUMsT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDO1dBQzVCLENBQUMsT0FBTyxNQUFNLENBQUMsRUFBRSxLQUFLLFFBQVEsQ0FBQztXQUMvQixDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssTUFBTSxDQUFDO1dBQzNCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztXQUNiLENBQUMsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztXQUNqQyxDQUFDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO1dBQ3RDLENBQUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUM7V0FDMUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsQ0FBQztXQUM1QyxDQUFDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssUUFBUSxDQUFDO1dBQzNDLENBQUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxRQUFRLENBQUM7V0FDN0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxH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