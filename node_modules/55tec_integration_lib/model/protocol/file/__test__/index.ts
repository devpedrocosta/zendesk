
import { Readable } from 'stream';
import * as fs from 'fs';

import { Channel } from "../../";
import { Client } from "../";
import {Response} from "../index";

describe('File protocol', () => {

    it('should generate a new temporary file with fake text', async () => {

        let channelHandlers: any = [];

        let id = '';
        let name = 'Test file.txt';
        let uri = 'https://test.55pbx.com/test-file.txt';
        let mimeType = 'text/plain';
        let repository = 'tmp';
        let text = 'testing new text';

        let channel: Channel = {
            on(event: string, handler: (res: any, ...args: any[]) => any): any {
                channelHandlers.push(handler);
                // console.log('on', event, handler.toString());
            },
            send(req: any, ...args: any[]): any {
                console.log('send', req, ...args);
                if (req && req.id) id = req.id;
            }
        };

        let client = new Client(channel);

        let readable = new Readable();
        readable._read = function() {
            readable.push(text);
            readable.push(null);
        };

        setTimeout(() => {
            let res: Response = {
                id,
                channel: 'file',
                body: {
                    uri,
                    name,
                    mimeType,
                    repository,
                    createdAt: (new Date()).toISOString(),
                    ttl: 0
                }
            };
            for (let h of channelHandlers) h(res);
        }, 500);

        let file = await client.send(readable, name, mimeType, repository);

        console.info(file);

        return file;

    });


});
