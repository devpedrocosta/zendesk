"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusCode = exports.Client = exports.ResolutionError = exports.Channel = void 0;
const promise_1 = require("../../util/promise");
const inversify_1 = require("inversify");
class Channel {
    send(data, ...args) {
        console.log('CHANNEL | SEND | Data: ', data, ' | Args: ', ...args);
    }
    on(event, handler) {
        console.log('CHANNEL | ON | Event: ', event, ' | Handler: ', handler);
    }
}
exports.Channel = Channel;
class ResolutionError extends Error {
    constructor(expectation, data) {
        let found = 'request';
        if (expectation === 'request')
            found = 'response';
        super(`Invalid resolution: ${expectation} expected but ${found} found instead. Data: ${JSON.stringify(data)}`);
    }
}
exports.ResolutionError = ResolutionError;
/**
 * @TODO Implement generic types to stop resolving .send as any
 */
let Client = class Client {
    constructor(channel) {
        this.DEFAULT_REQUEST_TIMEOUT = 20000;
        this.channel = channel;
        this.registry = {};
        this.channel.on('message', (data) => {
            if (!this.implementsProtocol(data))
                return;
            return this.resolve(data);
        });
    }
    async send(...params) {
        let data = await this.build(...params);
        // to avoid overlappings
        if (!this.isRequest(data) && this.isResponse(data))
            return this.channel.send(data);
        let promise = new promise_1.IdentifiablePromise(data.id, data, this.registry);
        this.channel.send(data);
        if (this.DEFAULT_REQUEST_TIMEOUT > 0)
            promise.setTimeout(this.DEFAULT_REQUEST_TIMEOUT);
        return promise;
    }
    resolve(data) {
        let promise = this.registry[data.id];
        if (!promise)
            return this.handleUnregistredMessage(data);
        try {
            return promise.resolve(this.parseResolution(data));
        }
        catch (err) {
            return promise.reject(err);
        }
    }
};
Client = __decorate([
    inversify_1.injectable(),
    __metadata("design:paramtypes", [Channel])
], Client);
exports.Client = Client;
var StatusCode;
(function (StatusCode) {
    StatusCode["OK"] = "200";
    StatusCode["BAD_REQUEST"] = "400";
    StatusCode["UNAUTHORIZED"] = "401";
    StatusCode["FORBIDDEN"] = "403";
    StatusCode["NOT_FOUND"] = "404";
    StatusCode["CONFLICT"] = "409";
    StatusCode["GONE"] = "410";
    StatusCode["UNPROCESSABLE_ENTITY"] = "422";
    StatusCode["UNAVAILABLE_FOR_LEGAL_REASONS"] = "451";
    StatusCode["INTERNAL_ERROR"] = "500";
    StatusCode["SERVICE_UNAVAILABLE"] = "503";
    StatusCode["GATEWAY_TIMEOUT"] = "504";
})(StatusCode = exports.StatusCode || (exports.StatusCode = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQSxnREFBbUU7QUFDbkUseUNBQXVDO0FBRXZDLE1BQWEsT0FBTztJQUVoQixJQUFJLENBQUMsSUFBUyxFQUFFLEdBQUcsSUFBVztRQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsRUFBRSxDQUFDLEtBQWEsRUFBRSxPQUEyQztRQUN6RCxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDMUUsQ0FBQztDQUVKO0FBVkQsMEJBVUM7QUEyQkQsTUFBYSxlQUFnQixTQUFRLEtBQUs7SUFFdEMsWUFBWSxXQUFtQyxFQUFFLElBQXdCO1FBQ3JFLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQztRQUN0QixJQUFJLFdBQVcsS0FBSyxTQUFTO1lBQUUsS0FBSyxHQUFHLFVBQVUsQ0FBQztRQUVsRCxLQUFLLENBQUMsdUJBQXVCLFdBQVcsaUJBQWlCLEtBQUsseUJBQXlCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25ILENBQUM7Q0FFSjtBQVRELDBDQVNDO0FBRUQ7O0dBRUc7QUFFSCxJQUFzQixNQUFNLEdBQTVCLE1BQXNCLE1BQU07SUFPeEIsWUFBWSxPQUFnQjtRQUw1Qiw0QkFBdUIsR0FBVyxLQUFLLENBQUM7UUFNcEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBUyxFQUFFLEVBQUU7WUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7Z0JBQUUsT0FBTztZQUMzQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQWE7UUFFdkIsSUFBSSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFFdkMsd0JBQXdCO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVuRixJQUFJLE9BQU8sR0FBRyxJQUFJLDZCQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QixJQUFJLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxDQUFDO1lBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUV2RixPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBZVMsT0FBTyxDQUFDLElBQXdCO1FBQ3RDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPO1lBQUUsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFnQixDQUFDO1FBRXhFLElBQUk7WUFDQSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3REO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDOUI7SUFDTCxDQUFDO0NBRUosQ0FBQTtBQXpEcUIsTUFBTTtJQUQzQixzQkFBVSxFQUFFO3FDQVFZLE9BQU87R0FQVixNQUFNLENBeUQzQjtBQXpEcUIsd0JBQU07QUEyRDVCLElBQVksVUFpQlg7QUFqQkQsV0FBWSxVQUFVO0lBRWxCLHdCQUFVLENBQUE7SUFFVixpQ0FBbUIsQ0FBQTtJQUNuQixrQ0FBb0IsQ0FBQTtJQUNwQiwrQkFBaUIsQ0FBQTtJQUNqQiwrQkFBaUIsQ0FBQTtJQUNqQiw4QkFBZ0IsQ0FBQTtJQUNoQiwwQkFBWSxDQUFBO0lBQ1osMENBQTRCLENBQUE7SUFDNUIsbURBQXFDLENBQUE7SUFFckMsb0NBQXNCLENBQUE7SUFDdEIseUNBQTJCLENBQUE7SUFDM0IscUNBQXVCLENBQUE7QUFFM0IsQ0FBQyxFQWpCVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQWlCckIifQ==