import { v4 as uuid } from "uuid";

import { Client as _Client } from '../';
import { Request as IntegratorRequest, Body as IntegratorRequestBody } from '../integrator/request';
import {
    Body as IntegratorResponseBody,
    Response as IntegratorResponse,
    ResponseError
} from '../integrator/response';
import { StatusCode } from "../";
import { Action } from "../../metadata/action";
import { ResolutionError } from "../";
import { Integration as Alias } from "../../../model"

/**
 * @TODO create a better typing without inheritance because
 * Request doesn't respect Liskov principle with IntegratorRequest
 */
export type Request = IntegratorRequest & {
    integration: Alias,
    channel: 'integration',
    // cannot remove resources due to type contract
    // resources: undefined
};

export type Response = IntegratorResponse & {
    channel: 'integration',
};

export function isRequest(target: any): target is Request {

    return (
        !!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === 'integration')
        && (target.action)
        && (typeof target.action === 'string')
        && (target.body === undefined || (target.body && (typeof target.body === 'object')))
    );

}

export function isResponse(target: any): target is Response {

    return (
        !!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === 'integration')
        && (target.response)
        && (typeof target.response === 'object')
        && (Object.values(StatusCode).includes(('' + target.response.code) as StatusCode))
        && (!target.response.error
            || (
                (typeof target.response.error === 'string')
                    || (typeof target.response.error === 'object'
                    && target.response.error.message
                    && typeof target.response.error.message === 'string')
                    )
            )
    );

}

/**
 * @TODO implements resource discovery to avoid having to make all actions hardcoded
 */
export class Client extends _Client {

    async send(integration: Alias, action: string, body: IntegratorRequestBody): Promise<IntegratorResponseBody> {
        return super.send(integration, action, body);
    }

    isRequest(target: any): target is Request { return isRequest(target); }

    isResponse(target: any): target is Response { return isResponse(target); }

    implementsProtocol(target: any): target is Request | Response {
        return this.isRequest(target) || this.isResponse(target);
    }

    protected async handleUnregistredMessage(message: Request | Response): Promise<any> { }

    protected async build(integration: Alias, action: Action, body: IntegratorRequestBody): Promise<Request> {

        return {
            id: uuid(),
            channel: 'integration',
            action,
            integration,
            resources: [],
            body,
        };

    }

    protected parseResolution(data: Request | Response): IntegratorResponseBody {
        if (!this.isResponse(data)) throw new ResolutionError('response', data);

        if (data.response.error) throw new ResponseError(typeof data.response.error === 'string' ? data.response.error : data.response.error.message, data.response.code, data.response.error && typeof data.response.error === 'object' ? data.response.error.name : "");

        return data.response.body;
    }

}
