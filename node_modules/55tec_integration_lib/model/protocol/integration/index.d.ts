import { Client as _Client } from '../';
import { Request as IntegratorRequest, Body as IntegratorRequestBody } from '../integrator/request';
import { Body as IntegratorResponseBody, Response as IntegratorResponse } from '../integrator/response';
import { Action } from "../../metadata/action";
import { Integration as Alias } from "../../../model";
/**
 * @TODO create a better typing without inheritance because
 * Request doesn't respect Liskov principle with IntegratorRequest
 */
export declare type Request = IntegratorRequest & {
    integration: Alias;
    channel: 'integration';
};
export declare type Response = IntegratorResponse & {
    channel: 'integration';
};
export declare function isRequest(target: any): target is Request;
export declare function isResponse(target: any): target is Response;
/**
 * @TODO implements resource discovery to avoid having to make all actions hardcoded
 */
export declare class Client extends _Client {
    send(integration: Alias, action: string, body: IntegratorRequestBody): Promise<IntegratorResponseBody>;
    isRequest(target: any): target is Request;
    isResponse(target: any): target is Response;
    implementsProtocol(target: any): target is Request | Response;
    protected handleUnregistredMessage(message: Request | Response): Promise<any>;
    protected build(integration: Alias, action: Action, body: IntegratorRequestBody): Promise<Request>;
    protected parseResolution(data: Request | Response): IntegratorResponseBody;
}
