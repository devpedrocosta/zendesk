import { Registry } from "../../util/promise";
export declare class Channel {
}
export interface Channel {
    send(req: any, ...args: any[]): any;
    on(event: string, handler: (res: any, ...args: any[]) => any): any;
}
export declare type Handler<Request = any, Response = any> = (data: Request | Response) => void;
/**
 * @TODO refine request default structure model
 */
export declare type Request = {
    id: string;
    [f: string]: any;
};
/**
 * @TODO refine response default structure model
 */
export declare type Response = {
    id: string;
    [f: string]: any;
};
export declare class ResolutionError extends Error {
    constructor(expectation: 'request' | 'response', data: Request | Response);
}
/**
 * @TODO Implement generic types to stop resolving .send as any
 */
export declare abstract class Client {
    DEFAULT_REQUEST_TIMEOUT: number;
    protected readonly channel: Channel;
    protected readonly registry: Registry<Request, Response>;
    constructor(channel: Channel);
    send(...params: any[]): Promise<any>;
    abstract implementsProtocol(target: any): target is Request | Response;
    abstract isRequest(target: any): target is Request;
    abstract isResponse(target: any): target is Response;
    protected abstract build(...params: any[]): Promise<Request | Response>;
    protected abstract handleUnregistredMessage(message: Request | Response): Promise<any>;
    /**
     * @TODO refactor -> this method is only necessary if requests are sent from client module. For protocols that handle requests and send responses, it has no use.
     */
    protected abstract parseResolution(data: Request | Response): any;
    protected resolve(data: Request | Response): void;
}
export declare enum StatusCode {
    OK = "200",
    BAD_REQUEST = "400",
    UNAUTHORIZED = "401",
    FORBIDDEN = "403",
    NOT_FOUND = "404",
    CONFLICT = "409",
    GONE = "410",
    UNPROCESSABLE_ENTITY = "422",
    UNAVAILABLE_FOR_LEGAL_REASONS = "451",
    INTERNAL_ERROR = "500",
    SERVICE_UNAVAILABLE = "503",
    GATEWAY_TIMEOUT = "504"
}
