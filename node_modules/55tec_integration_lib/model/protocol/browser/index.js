"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.generateBrowserId = exports.isResponse = exports.isRequest = exports.TargetType = exports.CacheMissError = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const uuid_1 = require("uuid");
const __1 = require("../");
const protocol_1 = require("../../protocol");
class CacheMissError extends Error {
    constructor(message) {
        super(`The function was not found on integrator cache - please send the full payload - ${message}`);
        Object.setPrototypeOf(this, CacheMissError.prototype);
    }
}
exports.CacheMissError = CacheMissError;
var TargetType;
(function (TargetType) {
    TargetType["ADMIN"] = "admin";
    TargetType["WEBPHONE"] = "webphone";
    TargetType["ALL"] = "all";
})(TargetType = exports.TargetType || (exports.TargetType = {}));
function isRequest(target) {
    return (!!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === 'browser')
        && (typeof target.browserId === 'string')
        && (target.body)
        && (typeof target.body === 'object')
        && (target.body.params)
        && (typeof target.body.params === 'object')
        && (target.body.params.length !== undefined)
        && (!target.body.setup || typeof target.body.setup === 'string')
        && (!target.body.func || typeof target.body.func === 'string')
        && (!target.body.name || typeof target.body.name === 'string'));
}
exports.isRequest = isRequest;
function isResponse(target) {
    return (!!target
        && (typeof target === 'object')
        && (typeof target.id === 'string')
        && (target.channel === 'browser')
        && (!target.error || (typeof target.error === 'string')));
}
exports.isResponse = isResponse;
function generateBrowserId(clientId, branchNumber) {
    return `${clientId}-${branchNumber}`;
}
exports.generateBrowserId = generateBrowserId;
class Client extends protocol_1.Client {
    constructor(channel, funcDir) {
        super(channel);
        this.funcDir = funcDir;
        this.funcCache = {};
    }
    async load(funcName) {
        let func = await (new Promise((resolve, reject) => fs_1.default.readFile(path_1.default.join(this.funcDir, `./${funcName}.js`), (err, data) => err ? reject(err) : resolve(data.toString('ascii')))));
        return this.funcCache[funcName] = func;
    }
    async build(browserId, funcName, data) {
        const id = uuid_1.v4();
        const body = {
            name: funcName,
            params: data,
        };
        if (!this.funcCache[funcName])
            body.func = await this.load(funcName);
        if (funcName !== 'setup' && !this.funcCache['setup'])
            body.setup = await this.load('setup');
        return {
            id,
            browserId,
            channel: 'browser',
            body,
        };
    }
    async send(browserId, funcName, data, config = { target: TargetType.WEBPHONE }) {
        try {
            let result = await super.send(browserId, funcName, data, config);
            return result;
        }
        catch (err) {
            if (err instanceof CacheMissError) {
                delete this.funcCache[funcName];
                delete this.funcCache['setup'];
                return super.send(browserId, funcName, data, config);
            }
            throw err;
        }
    }
    isRequest(target) { return isRequest(target); }
    isResponse(target) { return isResponse(target); }
    implementsProtocol(target) {
        return this.isRequest(target) || this.isResponse(target);
    }
    async handleUnregistredMessage(message) { }
    parseResolution(data) {
        if (!this.isResponse(data))
            throw new __1.ResolutionError('response', data);
        if (data.error) {
            if (data.error.toLowerCase().includes('cache miss'))
                throw new CacheMissError(data.error);
            throw new Error(data.error);
        }
        return data.body;
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBQ3hCLCtCQUFrQztBQUVsQywyQkFBc0M7QUFDdEMsNkNBQXdHO0FBRXhHLE1BQWEsY0FBZSxTQUFRLEtBQUs7SUFFckMsWUFBWSxPQUFlO1FBQ3ZCLEtBQUssQ0FBQyxtRkFBbUYsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNwRyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUQsQ0FBQztDQUVKO0FBUEQsd0NBT0M7QUFxQkQsSUFBWSxVQUlYO0FBSkQsV0FBWSxVQUFVO0lBQ2xCLDZCQUFlLENBQUE7SUFDZixtQ0FBcUIsQ0FBQTtJQUNyQix5QkFBVyxDQUFBO0FBQ2YsQ0FBQyxFQUpXLFVBQVUsR0FBVixrQkFBVSxLQUFWLGtCQUFVLFFBSXJCO0FBUUQsU0FBZ0IsU0FBUyxDQUFDLE1BQVc7SUFFakMsT0FBTyxDQUNILENBQUMsQ0FBQyxNQUFNO1dBQ0wsQ0FBQyxPQUFPLE1BQU0sS0FBSyxRQUFRLENBQUM7V0FDNUIsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxFQUFFLEtBQUssUUFBUSxDQUFDO1dBQy9CLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUM7V0FDOUIsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxTQUFTLEtBQUssUUFBUSxDQUFDO1dBQ3RDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztXQUNiLENBQUMsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztXQUNqQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1dBQ3BCLENBQUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxRQUFRLENBQUM7V0FDeEMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0s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