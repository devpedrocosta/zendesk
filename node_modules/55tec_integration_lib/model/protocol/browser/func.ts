import {Credential, Value as CredentialValue, Type as CredentialType} from "../integrator/credential";

export enum MessageType {
    TEXT = 'text',
    ATTACHMENT = 'attachment',
    FORM = 'form', // fieldset
    INPUT = 'input', // single input
    SYSTEM = 'system', // system messages
}

export type Participation = {
    _id: string;
    startedAt: string;
    finishedAt?: string;
    data?: {[k: string]: any};
    participant: Participant;
    channel: Channel;
};

export enum ContactType {
    BRANCH = 'branch',
    PHONE = 'phone',
    CODE = 'code',
}

export type Contact = {
    type: ContactType;
    value: string | { number: string, mask: string }
};

export type Participant = {
    name: string;
    contacts: Contact[];
    type: ParticipantType;
};

export enum ParticipantType {
    USER = "user",
    CUSTOMER = "customer",
    MENU = "menu",
    QUEUE = "queue",
    ANONYMOUS = "anonymous",
    SYSTEM = 'system',
}

export enum AlertType {
    ERROR = "error",
    WARNING = "warning",
    INFO = "info",
}

export type Notification = {
    message: string,
    type: AlertType,
    reason: string,
    session?: Credential
}

export type Channel = {
    alias: string,
    provider: {
        alias: string,
        integration?: string,
        clientIntegration?: string,
    },
};

export type Message = {
    _id: string, // tmp -> important to remove transparency
    content: any,
    chat_id: string,
    type: MessageType,
    acks: Ack[],
    sentTo: Participation[],
    sentAt: string,
    sender: Participant,
    source: Channel,
    replyOf?: Object
};

export type Conversation = {
    _id: string;
    engager: Participation;
    engaged: Participation[];
    startedAt: string;
    type: 'phone';
    transferredFrom?: string;
    lastMessage?: Message;
};

export type Ack = {
    type: 'delivery' | 'read' | 'error';
    occurredAt: string;
    participant: Participant;
    channel: Channel;
    error?: {
        name: string,
        message: string,
    };
}

export type Session = {
    isTwoFactor: boolean;
    obfuscatedPhone?: string;
};

export interface Webphone {
    call: (number: string) => void;
    showMessage: (message: Message) => void;
    ackMessage: (id: string, conversationId: string, acks: Ack[]) => void;
    showConversation: (conversation: Conversation) => void;
    removeConversation: (conversationId: string) => void;
    endConversation: (conversationId: string, finishedAt: string) => void;
    getNextDispatch: (actionType: string) => Promise<{type: string, payload: any}>;
    onDispatch: (actionType: string, handler: (...args: any[]) => any) => void;
    showAlert: (text: string, type: AlertType) => void;
    showNotification(notification: Notification): void;
    showQRCode(qrcode: string): void;
    getDeviceCode(): Promise<string>;
    getStringSession(session: string): void;
    getTwofaCode(session: Session): Promise<string>;
    getCredentials(type: CredentialType): Promise<CredentialValue>
}

export interface Admin {
    showQRCode(qrcode: string): void;
    showNotification(notification: Notification): void;
    showAlert(text: string, type: string): void;
    getDeviceCode(): Promise<string>;
    getStringSession(session: string): void;
    getTwofaCode(session: Session): Promise<string>;
    getPowerBiAccessToken(access_token: string, refresh_token: string): void;
    getCredentials(type: CredentialType): Promise<CredentialValue>
}

export interface Context {
    injectScript: (source: string) => Promise<any>;
    webphone?: Webphone;
    admin?: Admin;
    entrypoint: string;
}
