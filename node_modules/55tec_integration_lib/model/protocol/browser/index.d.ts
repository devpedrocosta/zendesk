import { Channel, Client as _Client, Request as _Request, Response as _Response } from '../../protocol';
export declare class CacheMissError extends Error {
    constructor(message: string);
}
export declare type Request = _Request & {
    browserId: string;
    channel: 'browser';
    body: RequestBody;
};
export declare type RequestBody = {
    name?: string;
    func?: string;
    params: any[];
    setup?: string;
};
export declare type Response = _Response & {
    channel: 'browser';
    error?: string;
    body?: ResponseBody;
};
export declare enum TargetType {
    ADMIN = "admin",
    WEBPHONE = "webphone",
    ALL = "all"
}
export declare type Config = {
    target: TargetType | TargetType[];
};
export declare type ResponseBody = any;
export declare function isRequest(target: any): target is Request;
export declare function isResponse(target: any): target is Response;
export declare function generateBrowserId(clientId: string, branchNumber: string): string;
export declare class Client extends _Client {
    readonly funcDir: string;
    protected readonly funcCache: {
        [file: string]: string;
    };
    constructor(channel: Channel, funcDir: string);
    load(funcName: string): Promise<string>;
    build(browserId: string, funcName: string, data: any[]): Promise<Request>;
    send(browserId: string, funcName: string, data: any[], config?: Config): Promise<any>;
    isRequest(target: any): target is Request;
    isResponse(target: any): target is Response;
    implementsProtocol(target: any): target is Request | Response;
    protected handleUnregistredMessage(message: Request | Response): Promise<any>;
    protected parseResolution(data: Request | Response): any;
}
