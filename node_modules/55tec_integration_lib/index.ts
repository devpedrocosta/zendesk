import 'reflect-metadata';
import { Channel } from './model/protocol';
import { Handler as IntegratorHandler } from './model/protocol/integrator';
import { isRequest, Options } from './model/protocol/integrator/request';
import { Request, Router, Handler as RouteHandler } from './model/protocol/server/resource';
import { Client as Server } from "./model/protocol/server";
import { Client as IntegrationClient } from "./model/protocol/integration";
import { parse } from "./model/metadata/action";
import { Operation } from "./model/metadata/action/operation";
import { Credential } from "./model/protocol/integrator/credential";
import { Integrable, Integration } from "./model";
/**
 * @TODO add integration model definition
 */
export async function listen(channel: Channel, handler: IntegratorHandler) {

    channel.on('message', async (data: any) => {

        try {
            if (!isRequest(data)) return;

            let result = await handler(data);

            return channel.send({
                id: data.id,
                response: {
                    code: '200',
                    body: result
                }
            });
        } catch(err:any) {
            return channel.send({
                id: data.id,
                response: {
                    code: err.code ? err.code : '500',
                    error: {
                        message: err.message,
                        name: err.name
                    }
                }
            });
        }

    });

}

export type FlowHookParser = (req: Request) => {
    action?: string,
    credentials: Credential[],
    data: Integrable | Integrable[]
}[];

export async function flowHook(integrationClient: IntegrationClient, server: Server, actions: {[action: string]: FlowHookParser}) {

    let prefix = '/flows';
    let router = new Router();

    for (let action in actions) {

        let parser = actions[action];
        let [ entity, operation ] = parse(action);

        let handler: RouteHandler = async (req, res) => {
            try {
                let resultSet = parser(req);
                for (let result of resultSet) {
                    let { credentials, data } = result;

                    let entities = data;
                    if (!(entities instanceof Array)) entities = [ entities ];

                    await Promise.all(entities.map(async entity => integrationClient.send(Integration.FLOW, result.action || action, {
                            credentials,
                            data: entity,
                        })
                    ));
                }
                return res.status(204).end();
            } catch(err:any) {
                return res.status(err.code || 500).json({ error: err.message });
            }
        };

        let method: 'post'  | 'put' | 'delete' = 'post';

        if ([ Operation.CREATE, Operation.UPDATE, Operation.DELETE ].includes(operation)) {
            switch (operation) {
                case Operation.UPDATE: method = 'put'; break;
                case Operation.DELETE: method = 'delete'; break;
            }
            router[method](`${prefix}/${entity}`, handler);
        }

        router.post(`${prefix}/${action}`, handler);

    }

    server.use(router);

}
