import "reflect-metadata";
import { Options, Pagination, Projection, Request } from "../model/protocol/integrator/request";
import { EmptyBody, FindBody as FindResponseBody, ListBody as ListResponseBody, SaveBody as SaveResponseBody } from "../model/protocol/integrator/response";
import { Credential, DeviceCode, QRCode } from "../model/protocol/integrator/credential";
import { Resource } from "../model/protocol/integrator/resource";
import { Basic, Token, Type, Key, Session } from "../model/protocol/integrator/credential";
import { Entity } from "../model/metadata/action/entity";
import { Action } from "../model/metadata/action";
import { Origin } from "../model/protocol/integrator/request/origin";
import { Cursor } from "../model/protocol/integrator/request/index";
export default class Service {
    static DEFAULT_PAGE_SIZE: number;
    request(url: string, method: "get" | "post" | "put" | "patch", body?: object, headers?: object, secure?: boolean): Promise<any>;
    save(ctx: Context): Promise<SaveResponseBody>;
    find(ctx: Context): Promise<FindResponseBody>;
    list(ctx: Context): Promise<ListResponseBody>;
    delete(ctx: Context): Promise<EmptyBody>;
    getWWWURL(entity: Entity, id: string, ctx?: Context): string;
}
export declare class Context<O extends Options = Options> {
    id: string;
    action: Action;
    auth: {
        [Type.BASIC]?: Basic;
        [Type.TOKEN]?: Token;
        [Type.KEY]?: Key;
        [Type.SESSION]?: Session;
        [Type.DEVICE_CODE]?: DeviceCode;
        [Type.QRCODE]?: QRCode;
    };
    credentials: Credential[];
    payload: {
        [f: string]: any;
    };
    opts: O;
    params: {
        projection: Projection;
        cursor?: Cursor;
        pagination: Pagination;
    };
    resourceMap: {
        [type: string]: Resource;
    };
    origin?: Origin;
    timeout?: number;
    constructor(req: Request);
    getAuthHeader(): {
        Authorization: string;
    } | {
        Authorization?: undefined;
    };
    hasResource(type: string): boolean;
}
