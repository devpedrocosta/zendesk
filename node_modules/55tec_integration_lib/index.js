"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flowHook = exports.listen = void 0;
require("reflect-metadata");
const request_1 = require("./model/protocol/integrator/request");
const resource_1 = require("./model/protocol/server/resource");
const action_1 = require("./model/metadata/action");
const operation_1 = require("./model/metadata/action/operation");
const model_1 = require("./model");
/**
 * @TODO add integration model definition
 */
async function listen(channel, handler) {
    channel.on('message', async (data) => {
        try {
            if (!request_1.isRequest(data))
                return;
            let result = await handler(data);
            return channel.send({
                id: data.id,
                response: {
                    code: '200',
                    body: result
                }
            });
        }
        catch (err) {
            return channel.send({
                id: data.id,
                response: {
                    code: err.code ? err.code : '500',
                    error: {
                        message: err.message,
                        name: err.name
                    }
                }
            });
        }
    });
}
exports.listen = listen;
async function flowHook(integrationClient, server, actions) {
    let prefix = '/flows';
    let router = new resource_1.Router();
    for (let action in actions) {
        let parser = actions[action];
        let [entity, operation] = action_1.parse(action);
        let handler = async (req, res) => {
            try {
                let resultSet = parser(req);
                for (let result of resultSet) {
                    let { credentials, data } = result;
                    let entities = data;
                    if (!(entities instanceof Array))
                        entities = [entities];
                    await Promise.all(entities.map(async (entity) => integrationClient.send(model_1.Integration.FLOW, result.action || action, {
                        credentials,
                        data: entity,
                    })));
                }
                return res.status(204).end();
            }
            catch (err) {
                return res.status(err.code || 500).json({ error: err.message });
            }
        };
        let method = 'post';
        if ([operation_1.Operation.CREATE, operation_1.Operation.UPDATE, operation_1.Operation.DELETE].includes(operation)) {
            switch (operation) {
                case operation_1.Operation.UPDATE:
                    method = 'put';
                    break;
                case operation_1.Operation.DELETE:
                    method = 'delete';
                    break;
            }
            router[method](`${prefix}/${entity}`, handler);
        }
        router.post(`${prefix}/${action}`, handler);
    }
    server.use(router);
}
exports.flowHook = flowHook;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0QkFBMEI7QUFHMUIsaUVBQXlFO0FBQ3pFLCtEQUE0RjtBQUc1RixvREFBZ0Q7QUFDaEQsaUVBQThEO0FBRTlELG1DQUFrRDtBQUNsRDs7R0FFRztBQUNJLEtBQUssVUFBVSxNQUFNLENBQUMsT0FBZ0IsRUFBRSxPQUEwQjtJQUVyRSxPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBUyxFQUFFLEVBQUU7UUFFdEMsSUFBSTtZQUNBLElBQUksQ0FBQyxtQkFBUyxDQUFDLElBQUksQ0FBQztnQkFBRSxPQUFPO1lBRTdCLElBQUksTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWpDLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDaEIsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNYLFFBQVEsRUFBRTtvQkFDTixJQUFJLEVBQUUsS0FBSztvQkFDWCxJQUFJLEVBQUUsTUFBTTtpQkFDZjthQUNKLENBQUMsQ0FBQztTQUNOO1FBQUMsT0FBTSxHQUFHLEVBQUU7WUFDVCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDWCxRQUFRLEVBQUU7b0JBQ04sSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUs7b0JBQ2pDLEtBQUssRUFBRTt3QkFDSCxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87d0JBQ3BCLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtxQkFDakI7aUJBQ0o7YUFDSixDQUFDLENBQUM7U0FDTjtJQUVMLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQztBQS9CRCx3QkErQkM7QUFRTSxLQUFLLFVBQVUsUUFBUSxD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