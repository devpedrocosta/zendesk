import { Client as IntegrationClient } from '../model/protocol/integration';
import jwt from "jsonwebtoken";
import {Credential} from "../model/protocol/integrator/credential";
import {Integration} from "../model/index";
import {newAction} from "../model/metadata/action/index";
import {Entity} from "../model/metadata/action/entity";
import {Operation as Op} from "../model/metadata/action/operation";
import {FindBody} from "../model/protocol/integrator/response";

type Search = {
    credentials?: Credential[],
    clientId?: string
}

export default class Auth {

    private integrationClient: IntegrationClient;

    constructor(integrationClient: IntegrationClient) {
        this.integrationClient = integrationClient;
    }

    static makeToken(clientId: string) {
        return jwt.sign({ client_id: clientId }, process.env.JWT_SECRET || '', { expiresIn:  86400000 });
    }

    async getClient(search: Search): Promise<{clientId: string, sipServer: string}> {
        const { credentials, clientId } = search;

        const response = await this.integrationClient.send(
            Integration.ADMIN,
            newAction(Entity.Client, Op.FIND),
            {
                data: {
                    clientId
                },
                credentials
            }
        ) as FindBody as {data: {clientId: string, sipServer: string}};

        return response.data;
    }

    async getAuthToken(search: Search) {
        const { clientId } = await this.getClient(search);

        return Auth.makeToken(clientId);
    }
}
