/// <reference types="node" />
export declare type Registry<Response = any, Context = any> = {
    [id: string]: IdentifiablePromise<Response, Context>;
};
export declare class NamedError extends Error {
    name: string;
    constructor(message: string, name: string);
    toJSON(): {
        message: string;
        name: string;
    };
}
export declare class Timeout {
    id?: NodeJS.Timeout;
    time: number;
    createdAt: Date;
    constructor(resolution: (...args: any[]) => any, time: number);
    stop(): void;
    timeLeft(): number;
}
export declare class IdentifiablePromise<Response = any, Context = any> {
    static DEFAULT_RESOLUTION(req: IdentifiablePromise): boolean;
    readonly id: string;
    readonly context: Context;
    registry?: Registry;
    resolve: (res?: Response) => any;
    reject: (err: Error) => any;
    promise: Promise<any>;
    protected done: boolean;
    protected timeout?: Timeout;
    constructor(id: string, context: Context, registry?: Registry);
    then(onFulfilled: (...args: any[]) => any, onRejected?: (...args: any[]) => any): Promise<any>;
    catch(handler: (...args: any[]) => any): Promise<any>;
    finally(handler: (...args: any[]) => any): Promise<any>;
    isDone(): boolean;
    setTimeout(time: number): void;
    untilTimeout(): number;
    get [Symbol.toStringTag](): string;
}
